<Window x:Class="AutoSplitVideo.View.MainWindow"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:tb="http://www.hardcodet.net/taskbar"
		xmlns:commands="clr-namespace:AutoSplitVideo.Commands"
		xmlns:valueConverter="clr-namespace:AutoSplitVideo.View.ValueConverter"
		xmlns:control="clr-namespace:AutoSplitVideo.View.Control"
		x:Name="Mw"
		Title="AutoSplitVideo" Height="618" Width="1000"
		WindowStartupLocation="CenterScreen"
		DataContext="{Binding MainWindowViewModel, ElementName=Mw}"
		Loaded="MainWindow_OnLoaded"
		Closing="MainWindow_OnClosing"
		Closed="MainWindow_OnClosed"
		>
		<Window.Resources>
			<ResourceDictionary>
				<commands:ShowWindowCommand x:Key="ShowHideCommand" />

				<Style TargetType="MenuItem" x:Key="BaseMenuItemStyle">
					<Setter Property="BorderThickness" Value="3" />
				</Style>

				<ContextMenu x:Key="NotifyIconContextMenu" >
					<MenuItem Header="显示/隐藏" Style="{StaticResource BaseMenuItemStyle}" Click="ShowHideMenuItem_OnClick"/>
					<MenuItem Header="退出" Style="{StaticResource BaseMenuItemStyle}" Click="ExitMenuItem_OnClick"/>
				</ContextMenu>

				<valueConverter:ProgressValueToBrushConverter x:Key="ProgressValueToBrushConverter" />
				<valueConverter:LiveStatusConverter x:Key="LiveStatusConverter" />
				<valueConverter:RecordingStatusConverter x:Key="RecordingStatusConverter" />
				<SolidColorBrush Color="LightGray" x:Key="GridLinesBrush" />
			</ResourceDictionary>
		</Window.Resources>
	<Grid>
		<tb:TaskbarIcon x:Name="NotifyIcon"
						Visibility="Visible"
						ToolTipText="AutoSplitVideo"
						IconSource="../Resources/Asaki.ico"
						MenuActivation="RightClick"
						ContextMenu="{StaticResource NotifyIconContextMenu}"
						DoubleClickCommand="{StaticResource ShowHideCommand}"
						DoubleClickCommandParameter="{Binding}">
		</tb:TaskbarIcon>
		<TabControl x:Name="TabControl" AllowDrop="True">
			<TabItem Header="录播机" PreviewDragOver="UIElement_OnPreviewDragOver">
				<DockPanel>
					<GroupBox Header="根目录" DockPanel.Dock="Top" Margin="3">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition />
								<RowDefinition />
							</Grid.RowDefinitions>
							<Grid.ColumnDefinitions>
								<ColumnDefinition />
								<ColumnDefinition Width="Auto"/>
							</Grid.ColumnDefinitions>
							<TextBox Grid.Row="0" Grid.Column="0" IsReadOnly="True" Margin="3" VerticalContentAlignment="Center"
							Text="{Binding CurrentConfig.RecordDirectory,Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"/>
							<Grid Grid.Row="1" Grid.Column="0" Margin="3">
								<ProgressBar Value="{Binding ProgressBarValue}" Foreground="{Binding ProgressBarValue,Converter={StaticResource ProgressValueToBrushConverter}}"/>
								<TextBlock Text="{Binding ProgressBarStr}" HorizontalAlignment="Center" VerticalAlignment="Center" />
							</Grid>
							<Button Grid.Row="0" Grid.Column="1" Content="选择目录" Margin="3" Padding="3" Click="SelectDirectoryButton_OnClick"/>
							<Button Grid.Row="1" Grid.Column="1" Content="打开目录" Margin="3" Padding="3" Click="OpenDirectoryButton_OnClick"/>
						</Grid>
					</GroupBox>
					<ToolBar DockPanel.Dock="Top" Background="Transparent" Loaded="ToolBar_OnLoaded" >
						<TextBox x:Name="AddRoomTextBox" Text="6154037" Width="100" BorderBrush="{StaticResource GridLinesBrush}" KeyDown="AddRoomTextBox_OnKeyDown" />
						<Button Content="添加房间" Click="AddRoomButton_OnClick"/>
					</ToolBar>
					<DataGrid x:Name="DataGrid"
					Margin="3"
					GridLinesVisibility="All"
					HorizontalGridLinesBrush="{StaticResource GridLinesBrush}"
					VerticalGridLinesBrush="{StaticResource GridLinesBrush}"
					Background="Transparent"
					BorderThickness="1"
					BorderBrush="{StaticResource GridLinesBrush}"

					HeadersVisibility="Column"
					AutoGenerateColumns="False"
					SelectionUnit="FullRow" SelectionMode="Extended"
					CanUserAddRows="False" CanUserResizeRows="False"
					CanUserDeleteRows="False"
					ItemsSource="{Binding Rooms}"
					>
						<DataGrid.Resources>
							<SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent" />
							<SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent" />
							<SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />
							<SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Black" />
						</DataGrid.Resources>
						<DataGrid.ContextMenu>
							<ContextMenu>
								<MenuItem Header="手动刷新" Style="{StaticResource BaseMenuItemStyle}" Click="ManualRefreshMenuItem_OnClick"/>
								<MenuItem Header="删除" Style="{StaticResource BaseMenuItemStyle}" Click="RemoveRoomButton_OnClick"/>
								<Separator />
								<MenuItem Header="打开目录" Style="{StaticResource BaseMenuItemStyle}" Click="OpenRoomDirMenuItem_OnClick" />
								<MenuItem Header="打开直播间" Style="{StaticResource BaseMenuItemStyle}" Click="OpenRoomMenuItem_OnClick" />
							</ContextMenu>
						</DataGrid.ContextMenu>
						<DataGrid.Columns>
							<DataGridTextColumn Header="短号" Binding="{Binding ShortRoomId}" IsReadOnly="True" />
							<DataGridTextColumn Header="房间号" Binding="{Binding RoomId}" IsReadOnly="True" />
							<DataGridTextColumn Header="主播" Binding="{Binding UserName}" IsReadOnly="True" />
							<DataGridTextColumn Header="直播间标题" Binding="{Binding Title}" IsReadOnly="True" />
							<DataGridTextColumn Header="直播状态" 
							Binding="{Binding IsLive,Converter={StaticResource LiveStatusConverter}}"
							IsReadOnly="True">
								<DataGridTextColumn.CellStyle>
									<Style TargetType="DataGridCell">
										<Setter Property="Foreground" Value="{Binding IsLive,Converter={StaticResource LiveStatusConverter}}" />
									</Style>
								</DataGridTextColumn.CellStyle>
							</DataGridTextColumn>
							<DataGridTextColumn Header="录制状态"
							Binding="{Binding IsRecording,Converter={StaticResource RecordingStatusConverter}}" IsReadOnly="True">
								<DataGridTextColumn.CellStyle>
									<Style TargetType="DataGridCell">
										<Setter Property="Foreground" Value="{Binding IsRecording,Converter={StaticResource RecordingStatusConverter}}" />
									</Style>
								</DataGridTextColumn.CellStyle>
							</DataGridTextColumn>
							<DataGridTemplateColumn Header="是否录制">
								<DataGridTemplateColumn.CellTemplate>
									<DataTemplate>
										<CheckBox HorizontalAlignment="Center" VerticalAlignment="Center"
										          IsChecked="{Binding Path=IsMonitor, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
									</DataTemplate>
								</DataGridTemplateColumn.CellTemplate>
							</DataGridTemplateColumn>
							<DataGridTemplateColumn Header="开播提醒">
								<DataGridTemplateColumn.CellTemplate>
									<DataTemplate>
										<CheckBox HorizontalAlignment="Center" VerticalAlignment="Center"
										          IsChecked="{Binding Path=IsNotify, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
									</DataTemplate>
								</DataGridTemplateColumn.CellTemplate>
							</DataGridTemplateColumn>
							<DataGridTemplateColumn Header="是否记录标题">
								<DataGridTemplateColumn.CellTemplate>
									<DataTemplate>
										<CheckBox HorizontalAlignment="Center" VerticalAlignment="Center"
										          IsChecked="{Binding Path=LogTitle, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
									</DataTemplate>
								</DataGridTemplateColumn.CellTemplate>
							</DataGridTemplateColumn>
							<DataGridTextColumn Header="弹幕重连间隔(ms)" Binding="{Binding TimingDanmakuRetry}" IsReadOnly="False" />
							<DataGridTextColumn Header="开播检查间隔(s)" Binding="{Binding TimingCheckInterval}" IsReadOnly="False" />
							<DataGridTextColumn Header="录制重连间隔(s)" Binding="{Binding TimingStreamRetry}" IsReadOnly="False" />
							<DataGridTextColumn Header="录制连接超时(ms)" Binding="{Binding TimingStreamConnect}" IsReadOnly="False" />
						</DataGrid.Columns>
					</DataGrid>
				</DockPanel>
			</TabItem>
			<TabItem Header="视频处理" PreviewDragOver="UIElement_OnPreviewDragOver">
				<DockPanel>
					<GroupBox Header="手动剪辑" DockPanel.Dock="Top">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition />
								<RowDefinition />
								<RowDefinition />
							</Grid.RowDefinitions>
							<Grid.ColumnDefinitions>
								<ColumnDefinition />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<TextBox x:Name="InputFileTextBox" Grid.Row="0" Grid.Column="0" IsReadOnly="True" Margin="3"
							Background="{StaticResource GridLinesBrush}" VerticalContentAlignment="Center"
							AllowDrop="True" PreviewDragOver="UIElement_OnPreviewDragOver" Drop="TextBox_OnPreviewDrop" TextChanged="InputFileTextBox_OnTextChanged"/>
							<TextBox x:Name="OutputFileTextBox" Grid.Row="1" Grid.Column="0" Margin="3" VerticalContentAlignment="Center" />

							<Button Grid.Row="0" Grid.Column="1" Content="视频" Margin="3" Padding="5" Click="InputFileButton_OnClick"/>
							<Button Grid.Row="1" Grid.Column="1" Content="输出" Margin="3" Padding="5" Click="OutputButton_OnClick"/>
							<Button Grid.Row="2" Grid.Column="1" Content="截取" Margin="3" Padding="5" Click="ClipButton_OnClick"/>

							<WrapPanel Grid.Row="2" Grid.Column="0" Margin="3">
								<TextBlock Text="开始时刻" VerticalAlignment="Center" Margin="3"/>
								<control:TimeControl x:Name="StartTimeControl" Margin="3" Text="00:00:00.000" />
								<TextBlock Text="持续时间" VerticalAlignment="Center" Margin="3" />
								<control:TimeControl x:Name="DurationControl" Margin="3" Text="01:30:00.000"/>
							</WrapPanel>
							</Grid>
					</GroupBox>
					<GroupBox Header="转封装" DockPanel.Dock="Top">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition />
								<RowDefinition />
								<RowDefinition />
							</Grid.RowDefinitions>
							<Grid.ColumnDefinitions>
								<ColumnDefinition />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<TextBox x:Name="InputFileTextBox2" Grid.Row="0" Grid.Column="0" IsReadOnly="True" Margin="3"
							Background="{StaticResource GridLinesBrush}" VerticalContentAlignment="Center"
							AllowDrop="True" PreviewDragOver="UIElement_OnPreviewDragOver" Drop="TextBox2_OnPreviewDrop" TextChanged="InputFileTextBox2_OnTextChanged" />
							<TextBox x:Name="OutputFileTextBox2" Grid.Row="1" Grid.Column="0" Margin="3" VerticalContentAlignment="Center" />

							<Button Grid.Row="0" Grid.Column="1" Content="选择" Margin="3" Padding="5" Click="SelectButton_OnClick"/>
							<Button Grid.Row="1" Grid.Column="1" Content="输出" Margin="3" Padding="5" Click="OutputButton2_OnClick"/>
							<Button Grid.Row="2" Grid.Column="1" Content="封装" Margin="3" Padding="5" Click="ConvertButton_OnClick"/>
							<WrapPanel Grid.Row="2" Grid.Column="0" Margin="3">
								<CheckBox x:Name="IsDeleteCheckBox" Content="转换完成删除" Margin="6" VerticalContentAlignment="Center"/>
								<CheckBox x:Name="IsDeleteToRecycleCheckBox" Content="删除到回收站" Margin="6" VerticalContentAlignment="Center" IsEnabled="{Binding IsChecked,ElementName=IsDeleteCheckBox}"/>
								<CheckBox x:Name="FixTimestampCheckBox" Content="修复时间戳（仅 Flv）" Margin="6" VerticalContentAlignment="Center" />
								<TextBlock Text="拖拽目录的话会自动将目录内的所有 Flv 文件转成 Mp4" Margin="6" VerticalAlignment="Center" Foreground="Red"/>
							</WrapPanel>
						</Grid>
					</GroupBox>
					<DataGrid x:Name="FlvDataGrid"
						Margin="3"
						GridLinesVisibility="All"
						HorizontalGridLinesBrush="{StaticResource GridLinesBrush}"
						VerticalGridLinesBrush="{StaticResource GridLinesBrush}"
						Background="Transparent"
						BorderThickness="1"
						BorderBrush="{StaticResource GridLinesBrush}"

						HeadersVisibility="Column"
						AutoGenerateColumns="False"
						SelectionUnit="FullRow" SelectionMode="Extended"
						CanUserAddRows="False" CanUserResizeRows="False"
						CanUserDeleteRows="False"
						ItemsSource="{Binding VideoConverter}">
						<DataGrid.ContextMenu>
							<ContextMenu>
								<MenuItem Header="移除选中任务" Style="{StaticResource BaseMenuItemStyle}" Click="RemoveTaskMenuItem_OnClick"/>
							</ContextMenu>
						</DataGrid.ContextMenu>
						<DataGrid.Columns>
							<DataGridTextColumn Header="状态" Binding="{Binding CurrentStatus}" IsReadOnly="True" Width="300"/>
							<DataGridTextColumn Header="描述" Binding="{Binding Description}" IsReadOnly="True" Width="300" />
						</DataGrid.Columns>
					</DataGrid>
				</DockPanel>
			</TabItem>
			<TabItem Header="日志" PreviewDragOver="UIElement_OnPreviewDragOver">
				<TextBox
					IsReadOnly="True"
					HorizontalScrollBarVisibility="Auto"
					VerticalScrollBarVisibility="Auto"
					Text="{Binding Logs.Text,Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"
					TextChanged="LogTextBoxBase_OnTextChanged">
					<TextBox.ContextMenu>
						<ContextMenu>
							<MenuItem Header="清空" Click="ClearLogMenuItem_OnClick"/>
						</ContextMenu>
					</TextBox.ContextMenu>
				</TextBox>
			</TabItem>
			<TabItem Header="设置" PreviewDragOver="UIElement_OnPreviewDragOver">
				<Grid>
					<Grid.RowDefinitions>
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />
					</Grid.RowDefinitions>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="Auto" />
					</Grid.ColumnDefinitions>
					<CheckBox Grid.Row="0" Grid.Column="0" Margin="3,6,3,3" Content="记录日志到文件" IsChecked="{Binding CurrentConfig.LogToFile}" />
					<Button Grid.Row="0" Grid.Column="1" Margin="3" Content="清空日志" Click="ClearLogButton_OnClick" />
					<Button Grid.Row="0" Grid.Column="2" Margin="3" Content="打开日志文件" Click="OpenLogButton_OnClick" />

					<Button Grid.Row="1" Grid.Column="1" Margin="3" Content="清空标题文件" Click="ClearTitleFileButton_OnClick" />
					<Button Grid.Row="1" Grid.Column="2" Margin="3" Content="打开标题文件" Click="OpenTitleFileButton_OnClick" />

					<CheckBox x:Name="AutoStartupCheckBox" Grid.Row="2" Grid.Column="0" Margin="3,6,3,3" Content="开机自启动"
					Checked="AutoStartupCheckBox_CheckedChanged"
					Unchecked="AutoStartupCheckBox_CheckedChanged"
					/>
				</Grid>
			</TabItem>
		</TabControl>
	</Grid>
</Window>
